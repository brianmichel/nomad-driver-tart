# .windsurf.md - Guide for Custom Nomad Task Driver (Golang)

## 1. Project Title & Goal

**Title:** Custom Nomad Task Driver for [Specify Target Platform/Technology]

**Goal:** To develop a robust and efficient custom task driver for HashiCorp Nomad, enabling the orchestration and management of tasks on [Specify Target Platform/Technology, e.g., Tart VMs, a specific container runtime, a custom execution environment]. This driver will integrate seamlessly with Nomad's ecosystem, providing users with a new way to deploy and manage their workloads.

## 2. Core Concepts

*   **Nomad:** A flexible, easy-to-use, and performant workload orchestrator that enables an organization to deploy and manage any application on any infrastructure at any scale.
*   **Task Driver:** A plugin in Nomad responsible for executing and managing tasks. It translates Nomad job specifications into actions on the target platform (e.g., running a binary, starting a VM, launching a container).
*   **Custom Task Driver:** This project. It will implement the Nomad task driver interface to manage tasks on a specific, non-standard (or specialized) execution environment.

## 3. Key Features

*   **Task Lifecycle Management:** Implement handlers for `StartTask`, `WaitTask`, `StopTask`, `DestroyTask`, `SignalTask`.
*   **Task Status Reporting:** Accurately report task states (e.g., `Pending`, `Running`, `Dead`) back to the Nomad server.
*   **Resource Isolation & Management:** (If applicable) Define how resources (CPU, memory, network, disk) are allocated and managed for tasks.
*   **Artifact Fetching:** Support for downloading task artifacts (e.g., binaries, configuration files) using Nomad's artifact handling.
*   **Log Streaming:** (Optional but highly recommended) Stream task stdout/stderr back to the Nomad client.
*   **Task Configuration:** Define driver-specific configuration options within the Nomad job specification.
*   **Health Checking:** (Optional) Implement mechanisms to check task health and report back to Nomad.
*   **Plugin Registration:** Correctly register the driver with Nomad.

## 4. Architecture Overview

```
+-----------------+      +-----------------------+      +-----------------------------+
|   Nomad Server  |----->|   Nomad Client Agent  |<---->|   Custom Task Driver Plugin |
+-----------------+      +-----------------------+      +-----------------------------+
                             (runs on worker node)        (manages tasks on target platform)
                                                            |
                                                            V
                                                  +-------------------------+
                                                  | Target Execution Platform |
                                                  | (e.g., Tart, Custom API)  |
                                                  +-------------------------+
```

*   **Nomad Server:** Accepts job submissions, schedules tasks.
*   **Nomad Client Agent:** Runs on worker nodes, receives tasks from the server, and delegates to the appropriate task driver.
*   **Custom Task Driver Plugin:** This Go application. It implements the `drivers.TaskDriver` interface. It interacts with the target platform to manage the lifecycle of tasks.
*   **Target Execution Platform:** The environment where the tasks will actually run (e.g., Tart CLI, a specific API, etc.).

## 5. Go Project Structure

```
nomad-driver-[name]/
├── main.go                 // Plugin entry point, registration
├── driver/
│   ├── driver.go           // Core TaskDriver implementation
│   ├── task_handle.go      // Implementation of TaskHandle
│   ├── task_config.go      // Structs for driver-specific task configuration
│   ├── [platform]_client.go// (Optional) Client for interacting with the target platform
│   └── ...                 // Other driver-specific logic
├── vendor/                 // Go modules dependencies
├── go.mod
├── go.sum
├── Makefile                // Build scripts, test commands
├── examples/
│   └── job.nomad           // Example Nomad job file using this driver
└── README.md
```

## 6. Key Nomad APIs/Interfaces

Primarily from `github.com/hashicorp/nomad/plugins/drivers`:

*   `drivers.DriverPlugin`
*   `drivers.TaskDriver`
    *   `Initialize(config map[string]string) error`
    *   `RecoverTask(handle *drivers.TaskHandle) error`
    *   `StartTask(config *drivers.TaskConfig, handle *drivers.TaskHandle, driverState []byte) (*drivers.TaskHandle, *drivers.DriverNetwork, error)`
    *   `WaitTask(ctx context.Context, taskID string) (<-chan *drivers.ExitResult, error)`
    *   `StopTask(taskID string, timeout time.Duration, signal string) error`
    *   `DestroyTask(taskID string, force bool) error`
    *   `InspectTask(taskID string) (*drivers.TaskStatus, error)`
    *   `TaskStats(ctx context.Context, taskID string, interval time.Duration) (<-chan *structs.TaskResourceUsage, error)`
    *   `TaskEvents(ctx context.Context) (<-chan *drivers.TaskEvent, error)`
    *   `SignalTask(taskID string, signal string) error`
*   `drivers.TaskHandle`: Represents a running task.
*   `drivers.TaskConfig`: Contains task configuration from the job file.
*   `drivers.TaskStatus`: Represents the current status of a task.
*   `drivers.ExitResult`: Information about a task's exit.

## 7. Go Packages & Dependencies

*   **`github.com/hashicorp/nomad/plugins`**: Core Nomad plugin framework.
*   **`github.com/hashicorp/nomad/plugins/drivers`**: Task driver interfaces and helpers.
*   **`github.com/hashicorp/nomad/api`**: (If needed) For interacting with the Nomad API (less common for drivers, but possible).
*   **`github.com/hashicorp/go-hclog`**: For structured logging, consistent with Nomad.
*   **`github.com/stretchr/testify`**: For testing (assertion library).
*   **`golang.org/x/sys/execabs`**: For securely executing external commands if your driver shells out.
*   **[Platform Specific SDKs/Libraries]**: e.g., if interacting with Tart, you might use libraries for process management or IPC.

## 8. Development Workflow & Testing

1.  **Setup Go Environment:** Ensure Go is installed and configured.
2.  **Dependency Management:** Use Go Modules (`go mod init`, `go get`).
3.  **Implement Interfaces:** Start by stubbing out the `TaskDriver` methods.
4.  **Build Plugin:**
    ```bash
    go build -o nomad-driver-[name] main.go
    ```
5.  **Nomad Development Mode:** Run Nomad in `-dev` mode for easy testing.
    ```bash
    nomad agent -dev -config /path/to/nomad.hcl
    ```
    Your Nomad agent configuration (`nomad.hcl`) will need to point to your custom driver plugin:
    ```hcl
    plugin_dir = "/path/to/your/plugin/directory"
    plugin "nomad-driver-[name]" {
      config {
        // driver-specific global config
      }
    }
    ```
6.  **Unit Tests:** Write unit tests for individual components and logic within the driver.
7.  **Integration Tests:** Test the driver's interaction with a local Nomad agent and the target platform.
    *   Submit example jobs (`job.nomad`).
    *   Verify task lifecycle and status reporting.
8.  **Iterate:** Debug, refine, and add features.

## 9. Logging and Monitoring

*   **Logging:** Use `github.com/hashicorp/go-hclog` for structured logging. This integrates well with Nomad's own logging.
    *   Log important events, errors, and state changes within the driver.
    *   Ensure logs from the tasks themselves (stdout/stderr) are captured and can be streamed or retrieved.
*   **Monitoring:** Implement `TaskStats` to provide resource usage metrics for tasks. This allows Nomad to display resource consumption and make scheduling decisions.

## 10. Future Enhancements (Considerations)

*   Advanced resource management (e.g., GPU support if applicable).
*   Custom artifact fetching mechanisms.
*   Secrets management integration.
*   Network virtualization or custom networking setup.
*   Support for more complex task dependencies or sidecars (if the target platform allows).

---
*This `.windsurf.md` file is a living document. Update it as the project evolves.*
